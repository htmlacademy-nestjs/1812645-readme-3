generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Posts {
  publication_id Int          @unique
  text_post_id   Int?         @unique
  video_post_id  Int?         @unique

  publications   Publications @relation(fields: [publication_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_publication_fkey")
  text_posts     TextPosts?   @relation(fields: [text_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_text_posts_fkey")
  video_posts    VideoPosts?  @relation(fields: [video_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_video_posts_fkey")

  @@map("posts")
}

model Kind {
  id           Int            @id @default(autoincrement()) @unique
  type         String         @unique

  publications Publications[]

  @@map("kind")
}

model Publications {
  id                  Int               @id @default(autoincrement())
  author_id           String
  date_of_creation    DateTime?         @default(now()) @db.Time(3)
  date_of_publication DateTime?         @db.Time(3)
  status              PublicationStatus @default(DRAFT)
  kind_id             Int
  post_id             Int               @unique @default(autoincrement())

  kind                Kind              @relation(fields: [kind_id], references: [id], map: "publications_kind_fkey")
  tags                String[]          @default([])
  posts               Posts?

  @@map("publications")
}

model TextPosts {
  id           Int    @id @default(autoincrement())
  name         String
  announcement String
  text         String

  posts        Posts?

  @@map("text_posts")
}

model VideoPosts {
  id            Int    @id @default(autoincrement())
  name          String
  link_to_video String
  
  posts         Posts?

  @@map("video_posts")
}

enum PublicationStatus {
  PUBLISHED
  DRAFT
}
